{"version":3,"sources":["components/Header.jsx","components/JournalCard.jsx","components/PastEntry.jsx","scripts/uploadFileToS3.js","components/JournalEditor.jsx","components/MonthBreak.jsx","components/JournalGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","border","borderRadius","textAlign","color","padding","margin","Header","message","classes","Fragment","Container","maxWidth","Typography","variant","component","className","theme","card","minWidth","minHeight","maring","spacing","boxShadow","props","r","g","b","JournalCard","pic","title","onClick","moodColor","Card","CardActionArea","CardMedia","alt","height","src","colors","happy","sad","love","calm","PastEntry","entry","useTheme","fullScreen","useMediaQuery","breakpoints","down","React","useState","open","setOpen","handleClose","imgURL","console","log","Dialog","onClose","aria-labelledby","scroll","fullWidth","DialogTitle","style","cursor","id","keyword","DialogActions","Button","DialogContent","DialogContentText","AWS","require","config","update","region","accessKeyId","process","AWSAccessKeyId","secretAccessKey","AWSSecretKey","BUCKET_NAME","Bucket","s3","S3","apiVersion","addBtn","background","addImageBtn","imgPreview","width","dialogFormBody","display","alignItems","dialogInsertImage","input","JournalEditor","questions","setImgUrl","undefined","imgUrl","setImgFile","Date","toLocaleString","accept","type","onChange","e","URL","createObjectURL","target","files","htmlFor","startIcon","fontSize","map","question","idx","key","TextField","autoFocus","label","multiline","rowsMax","file","uploadParams","Key","Body","upload","err","data","uploadFileToS3","formatter","Intl","DateTimeFormat","month","MonthBreak","date","format","getFullYear","QUESTIONS","sampleEntry","JournalGrid","Grid","container","item","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","Fab","aria-label","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab1360a8.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        border: 0,\n        borderRadius: 3,\n        textAlign: 'center',\n        // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        color: 'black',\n        padding: '0 30px',\n        margin: '20px'\n    },\n});\n\nexport default function Header({ message }) {\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <Container maxWidth=\"xl\">\n                <Typography variant=\"h2\" component=\"h1\" className={classes.root}>\n                    {message}\n                </Typography>\n            </Container>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardMedia, CardActionArea } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        minWidth: 275,\n        minHeight: 275,\n        maring: theme.spacing(2),\n        boxShadow: props => `0 3px 10px 2px rgba(${props.r}, ${props.g}, ${props.b}, 0.7)` //'0 3px 5px 2px rgba(255, 105, 135, .3)',\n    }\n}));\n\nconst JournalCard = ({ pic, title, onClick, moodColor }) => {\n    const classes = useStyles(moodColor);\n\n    function handleClick() {\n        onClick();\n    }\n\n    return (\n        <Card className={classes.card}>\n            <CardActionArea onClick={handleClick}>\n                <CardMedia\n                    component=\"img\"\n                    alt={title}\n                    height=\"275\"\n                    src={pic}\n                    title={title}\n                />\n            </CardActionArea>\n        </Card >\n\n    );\n\n}\n\nJournalCard.propTypes = {\n    pic: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func.isRequired,\n    moodColor: PropTypes.object.isRequired\n};\n\nexport default JournalCard;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport JournalCard from './JournalCard.jsx';\n\nconst colors = {\n    happy: { r: 255, g: 222, b: 0 },\n    sad: { r: 104, g: 130, b: 213 },\n    love: { r: 255, g: 63, b: 63 },\n    calm: { r: 121, g: 232, b: 158 },\n}\n\nexport default function PastEntry({ entry }) {\n\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        console.log(\"here\");\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <JournalCard\n                pic={entry.imgURL}\n                title=\"Shopping\"\n                moodColor={colors.happy}\n                onClick={handleClickOpen} />\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullScreen={fullScreen}\n                maxWidth=\"lg\"\n                scroll=\"paper\"\n                fullWidth\n            >\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n                    {entry.keyword}\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <CloseIcon></CloseIcon>\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Delete\n                    </Button>\n                </DialogActions>\n                <DialogContent>\n                    <DialogContentText>\n                        This was a post.\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}","const AWS = require('aws-sdk');\n// import AWS from 'aws-sdk';\n\nAWS.config.update({\n    region: 'us-west-2',\n    accessKeyId: process.env.AWSAccessKeyId,\n    secretAccessKey: process.env.AWSSecretKey\n});\nconst BUCKET_NAME = process.env.Bucket;\nconst API_VERSION = '2006-03-01'\nconst s3 = new AWS.S3({\n    apiVersion: API_VERSION,\n});\n\n// function uploadFileToS3(file) {\nexport default function uploadFileToS3(file) {\n    console.log(BUCKET_NAME);\n    // call S3 to retrieve upload file to specified bucket\n    // var uploadParams = {\n    //     Bucket: BUCKET_NAME,\n    //     Key: file.name,\n    //     Body: file,\n    //     ACL: \"public-read\"\n    // };\n    var uploadParams = {\n        Bucket: BUCKET_NAME,\n        Key: 'mykey.txt',\n        Body: \"HelloWorld\"\n    };\n    // call S3 to retrieve upload file to specified bucket\n    s3.upload(uploadParams, function (err, data) {\n        if (err) {\n            console.log(\"Error\", err);\n        }\n        if (data) {\n            console.log(\"Upload Success\");\n        }\n    });\n}\n\n// uploadFileToS3()","import React from 'react';\nimport uploadFileToS3 from '../scripts/uploadFileToS3';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\nimport { useTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    addBtn: {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        border: 0,\n        borderRadius: 3,\n        color: 'white',\n        padding: '0 30px',\n        minWidth: 275,\n        minHeight: 275\n    },\n    addImageBtn: {\n        borderRadius: 3,\n        minWidth: 100,\n        padding: '10px 30px',\n    },\n    imgPreview: {\n        width: '90%',\n        margin: '10px'\n    },\n    dialogFormBody: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    dialogInsertImage: {\n        minWidth: 200,\n        textAlign: 'center',\n    },\n    input: {\n        display: 'none'\n    }\n}));\n\nexport default function JournalEditor({ questions /* array of strings */ }) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setImgUrl(undefined);\n    };\n\n    const handleSubmit = () => {\n        uploadFileToS3(imgFile);\n        handleClose();\n    }\n\n    const [imgUrl, setImgUrl] = React.useState(undefined);\n    const [imgFile, setImgFile] = React.useState(undefined);\n\n    const handleImageChange = (e) => {\n        setImgUrl(URL.createObjectURL(e.target.files[0]));\n        setImgFile(e.target.files[0]);\n    }\n\n    return (\n        <div>\n            <Button className={classes.addBtn} onClick={handleClickOpen}>\n                Write new entry\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                fullScreen={fullScreen}\n                maxWidth=\"lg\"\n                fullWidth\n            >\n                <DialogTitle id=\"form-dialog-title\">{(new Date()).toLocaleString()}</DialogTitle>\n                <DialogContent className={fullScreen ? '' : classes.dialogFormBody}>\n                    <DialogContent className={classes.dialogInsertImage}>\n                        {imgUrl !== undefined && <img src={imgUrl} className={classes.imgPreview} alt=\"Your upload\" />}\n                        <input\n                            accept=\"image/*\"\n                            className={classes.input}\n                            style={{ display: 'none' }}\n                            id=\"raised-button-file\"\n                            type=\"file\"\n                            onChange={handleImageChange}\n                        />\n                        <label htmlFor=\"raised-button-file\">\n                            <Button\n                                className={classes.addImageBtn}\n                                variant=\"outlined\"\n                                component=\"span\"\n                                startIcon={<InsertPhotoIcon fontSize=\"large\" />}\n                            >\n                                Insert Image\n                            </Button>\n                        </label>\n                    </DialogContent>\n                    <DialogContent>\n                        {\n                            questions.map((question, idx) => {\n                                return (\n                                    <DialogContent key={idx}>\n                                        <DialogContentText>\n                                            {question}\n                                        </DialogContentText>\n                                        <TextField\n                                            autoFocus={idx === 0}\n                                            margin=\"dense\"\n                                            id={\"ans\" + idx}\n                                            label=\"Answer\"\n                                            type=\"text\"\n                                            fullWidth\n                                            variant=\"filled\"\n                                            multiline\n                                            rowsMax=\"4\"\n                                        />\n                                    </DialogContent>\n                                );\n                            })\n                        }\n                    </DialogContent>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\n\nconst formatter = new Intl.DateTimeFormat('en-us', { month: 'short' });\n\n\nexport default function MonthBreak({ date }) {\n    return (\n        <React.Fragment>\n            <Typography component='h1' variant='h6'>\n                {formatter.format(date)} {date.getFullYear()}\n            </Typography>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\nimport PastEntry from './PastEntry.jsx';\nimport JournalEditor from './JournalEditor.jsx';\nimport MonthBreak from './MonthBreak.jsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: \"0 5rem\",\n    }\n}));\n\nconst QUESTIONS = [\n    \"What did you do today?\",\n    \"What are you doing tomorrow?\",\n    \"LOL idk this is a very long question to test if the styling works please ignore or if you feel like answering please tell me what your favorite fruit is. Rules: it cannot be pineapple, or apple, or anything that is not watermelon because watermelon is the only correct answer. Choose carefully. LOL idk this is a very long question to test if the styling works please ignore or if you feel like answering please tell me what your favorite fruit is. Rules: it cannot be pineapple, or apple, or anything that is not watermelon because watermelon is the only correct answer. Choose carefully.\"\n]\n\nconst sampleEntry = {\n    \"time\": 1572141478124,\n    \"imgURL\": \"https://i.pinimg.com/originals/18/4d/9d/184d9deff2f1ddf83afe1a02ab5560dd.gif\",\n    \"ans\": [\n        \"I saw a tree.\",\n        \"It was cool.\",\n        \"It had a lot of colors.\"\n    ],\n    \"keyword\": \"Sunset Beach\",\n    \"SentimentScore\": {\n        \"Mixed\": 0.030585512690246105,\n        \"Positive\": 0.94992071056365967,\n        \"Neutral\": 0.0141543131828308,\n        \"Negative\": 0.00893945890665054\n    },\n    \"Sentiment\": \"POSITIVE\",\n    \"LanguageCode\": \"en\"\n}\n\nexport default function JournalGrid({ data }) {\n    const classes = useStyles();\n\n\n    // const renderEntries = () => (\n    //     // Loop through the entries and render a grid \n    //     for(i = 0; i < data.length; ++i) {\n\n    //     }\n    //     return entryGridItems;      ;\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <MonthBreak date={new Date()}></MonthBreak>\n                </Grid>\n                {/* <Grid item xs={12} md={4} lg={3}> */}\n                <Grid item>\n                    <JournalEditor questions={QUESTIONS} />\n                    {/* <Button variant=\"outlined\" size=\"large\" className={classes.addBtn}>\n                        Large\n                    </Button> */}\n                </Grid>\n                <Grid item xs={12} md={4} lg={3}>\n                    <PastEntry entry={sampleEntry} />\n                </Grid >\n                <Grid item xs={12} md={4} lg={3}>\n                    <PastEntry entry={sampleEntry} />\n                </Grid >\n                <Grid item xs={12} md={4} lg={3}>\n                    <PastEntry entry={sampleEntry} />\n                </Grid >\n                <Grid item xs={12} md={4} lg={3}>\n                    <PastEntry entry={sampleEntry} />\n                </Grid >\n                <Grid item xs={12}>\n                    <MonthBreak date={new Date(2000, 2, 9)}></MonthBreak>\n                </Grid>\n                <Grid item xs={12} md={4} lg={3}>\n                    <PastEntry entry={sampleEntry} />\n                </Grid >\n            </Grid>\n        </div>\n    );\n}\n\nJournalGrid.propTypes = {\n    data: PropTypes.array\n};","import React, { useState, useEffect } from 'react';\n// Material UI\nimport Fab from '@material-ui/core/Fab';\nimport Header from './components/Header.jsx';\nimport JournalGrid from './components/JournalGrid.jsx';\nimport PastEntry from './components/PastEntry.jsx';\nimport './App.css';\n\nrequire('dotenv').config();\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header message=\"Good Afternoon, Will\"></Header>\n      </header>\n      <body>\n        <JournalGrid />\n        <Fab color=\"primary\" aria-label=\"add\">\n          Add\n        </Fab>\n      </body>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}