{"ast":null,"code":"import _slicedToArray from \"/home/will/Projects/sdhacks19/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/will/Projects/sdhacks19/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/will/Projects/sdhacks19/client/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useReducer } from 'react'; // Material UI\n\nimport Header from './components/Header.jsx';\nimport JournalGrid from './components/JournalGrid.jsx';\nimport PastEntry from './components/PastEntry.jsx';\nimport './App.css';\nimport axios from 'axios';\n\nrequire('dotenv').config();\n\nconst URL = \"/api/entries\"; //{\"answers\":[\"I saw a tree.\",\"It was cool.\",\"It had a lot of colors.\"],\"_id\":\"5db51e88859948421fb2c53a\",\"date\":\"October 26, 2019\",\"imgUrl\":\"https://i.gifer.com/NbS8.gif\",\"keyword\":\"tree\",\"SentimentScore\":{\"Mixed\":0.030585512690246106,\"Positive\":0.9499207105636597,\"Neutral\":0.0141543131828308,\"Negative\":0.00893945890665054},\"Sentiment\":\"POSITIVE\",\"__v\":0}\n\nexport default function App() {\n  const entriesReducer = (state, action) => {\n    switch (action.type) {\n      case 'set':\n        return _objectSpread({}, state, {\n          entries: action.entries\n        });\n\n      case 'addEntry':\n        return _objectSpread({}, state, {\n          entries: [...state.entries, action.newProp]\n        });\n\n      case 'deleteEntry':\n        return _objectSpread({}, state, {\n          entries: state.entries.filter(propertyItem => {\n            return propertyItem.value !== action.propToDelete;\n          })\n        });\n\n      case 'areFetching':\n        // True when fetching all entries\n        return _objectSpread({}, state, {\n          areFetching: action.value\n        });\n\n      case 'isFetching':\n        // True when fetching one property\n        return _objectSpread({}, state, {\n          isFetching: action.value\n        });\n\n      default:\n        return state;\n    }\n  };\n\n  const _useReducer = useReducer(entriesReducer, {\n    entries: [],\n    areFetching: false,\n    isFetching: false\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        _useReducer2$ = _useReducer2[0],\n        entries = _useReducer2$.entries,\n        areFetching = _useReducer2$.areFetching,\n        isFetching = _useReducer2$.isFetching,\n        dispatch = _useReducer2[1]; // Fetching entries from db\n\n\n  const fetchProperties = useCallback(async () => {\n    try {\n      dispatch({\n        type: 'areFetching',\n        value: true\n      });\n      const response = await axios.get(\"\".concat(URL, \"/getProperties\"));\n      var properties = response.data.map(propertyItem => {\n        const key = propertyItem.name;\n        return {\n          label: key,\n          value: key,\n          item: null // empty object initially\n\n        };\n      });\n      dispatch({\n        type: 'set',\n        properties\n      });\n      dispatch({\n        type: 'areFetching',\n        value: false\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'areFetching',\n        value: false\n      });\n    }\n  }, [dispatch]); // Fetch data once at startup when the component first mounts.\n  // Since fetchProperties is memoized from useCallback, listing it as a\n  // dependency will not cause infinite rerenders\n\n  useEffect(() => {\n    fetchProperties();\n  }, [fetchProperties]);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Header, {\n    message: \"Good Afternoon, Will\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"body\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(JournalGrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/will/Projects/sdhacks19/client/src/App.js"],"names":["React","useState","useEffect","useReducer","Header","JournalGrid","PastEntry","axios","require","config","URL","App","entriesReducer","state","action","type","entries","newProp","filter","propertyItem","value","propToDelete","areFetching","isFetching","dispatch","fetchProperties","useCallback","response","get","properties","data","map","key","name","label","item","err","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD,C,CACA;;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAGA,MAAMC,GAAG,GAAG,cAAZ,C,CAEA;;AACA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,KAAL;AACE,iCAAYF,KAAZ;AAAmBG,UAAAA,OAAO,EAAEF,MAAM,CAACE;AAAnC;;AACF,WAAK,UAAL;AACE,iCAAYH,KAAZ;AAAmBG,UAAAA,OAAO,EAAE,CAAC,GAAGH,KAAK,CAACG,OAAV,EAAmBF,MAAM,CAACG,OAA1B;AAA5B;;AACF,WAAK,aAAL;AACE,iCACKJ,KADL;AAEEG,UAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcE,MAAd,CAAqBC,YAAY,IAAI;AAC5C,mBAAOA,YAAY,CAACC,KAAb,KAAuBN,MAAM,CAACO,YAArC;AACD,WAFQ;AAFX;;AAMF,WAAK,aAAL;AAAoB;AAClB,iCAAYR,KAAZ;AAAmBS,UAAAA,WAAW,EAAER,MAAM,CAACM;AAAvC;;AACF,WAAK,YAAL;AAAmB;AACjB,iCAAYP,KAAZ;AAAmBU,UAAAA,UAAU,EAAET,MAAM,CAACM;AAAtC;;AACF;AACE,eAAOP,KAAP;AAjBJ;AAmBD,GApBD;;AAD4B,sBAsB6BV,UAAU,CAACS,cAAD,EAAiB;AAClFI,IAAAA,OAAO,EAAE,EADyE;AAElFM,IAAAA,WAAW,EAAE,KAFqE;AAGlFC,IAAAA,UAAU,EAAE;AAHsE,GAAjB,CAtBvC;AAAA;AAAA;AAAA,QAsBnBP,OAtBmB,iBAsBnBA,OAtBmB;AAAA,QAsBVM,WAtBU,iBAsBVA,WAtBU;AAAA,QAsBGC,UAtBH,iBAsBGA,UAtBH;AAAA,QAsBiBC,QAtBjB,oBA4B5B;;;AACA,QAAMC,eAAe,GAAGC,WAAW,CAAC,YAAY;AAC9C,QAAI;AACFF,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,aAAR;AAAuBK,QAAAA,KAAK,EAAE;AAA9B,OAAD,CAAR;AACA,YAAMO,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,WAAalB,GAAb,oBAAvB;AACA,UAAImB,UAAU,GAAGF,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAkBZ,YAAY,IAAI;AACjD,cAAMa,GAAG,GAAGb,YAAY,CAACc,IAAzB;AACA,eAAQ;AACNC,UAAAA,KAAK,EAAEF,GADD;AAENZ,UAAAA,KAAK,EAAEY,GAFD;AAGNG,UAAAA,IAAI,EAAE,IAHA,CAGK;;AAHL,SAAR;AAKD,OAPgB,CAAjB;AAQAX,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,KAAR;AAAec,QAAAA;AAAf,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,aAAR;AAAuBK,QAAAA,KAAK,EAAE;AAA9B,OAAD,CAAR;AACD,KAbD,CAaE,OAAOgB,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE,aAAR;AAAuBK,QAAAA,KAAK,EAAE;AAA9B,OAAD,CAAR;AACD;AACF,GAlBkC,EAkBhC,CAACI,QAAD,CAlBgC,CAAnC,CA7B4B,CAiD5B;AACA;AACA;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,eAAe;AAChB,GAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF;AAUD","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n// Material UI\nimport Header from './components/Header.jsx';\nimport JournalGrid from './components/JournalGrid.jsx';\nimport PastEntry from './components/PastEntry.jsx';\nimport './App.css';\n\nimport axios from 'axios';\nrequire('dotenv').config();\n\n\nconst URL = \"/api/entries\";\n\n//{\"answers\":[\"I saw a tree.\",\"It was cool.\",\"It had a lot of colors.\"],\"_id\":\"5db51e88859948421fb2c53a\",\"date\":\"October 26, 2019\",\"imgUrl\":\"https://i.gifer.com/NbS8.gif\",\"keyword\":\"tree\",\"SentimentScore\":{\"Mixed\":0.030585512690246106,\"Positive\":0.9499207105636597,\"Neutral\":0.0141543131828308,\"Negative\":0.00893945890665054},\"Sentiment\":\"POSITIVE\",\"__v\":0}\nexport default function App() {\n  const entriesReducer = (state, action) => {\n    switch (action.type) {\n      case 'set':\n        return { ...state, entries: action.entries };\n      case 'addEntry':\n        return { ...state, entries: [...state.entries, action.newProp] };\n      case 'deleteEntry':\n        return {\n          ...state,\n          entries: state.entries.filter(propertyItem => {\n            return propertyItem.value !== action.propToDelete;\n          })\n        };\n      case 'areFetching': // True when fetching all entries\n        return { ...state, areFetching: action.value };\n      case 'isFetching': // True when fetching one property\n        return { ...state, isFetching: action.value };\n      default:\n        return state;\n    }\n  };\n  const [{ entries, areFetching, isFetching }, dispatch] = useReducer(entriesReducer, {\n    entries: [],\n    areFetching: false,\n    isFetching: false\n  });\n\n  // Fetching entries from db\n  const fetchProperties = useCallback(async () => {\n    try {\n      dispatch({ type: 'areFetching', value: true });\n      const response = await axios.get(`${URL}/getProperties`);\n      var properties = response.data.map(propertyItem => {\n        const key = propertyItem.name;\n        return ({\n          label: key,\n          value: key,\n          item: null // empty object initially\n        });\n      });\n      dispatch({ type: 'set', properties });\n      dispatch({ type: 'areFetching', value: false });\n    } catch (err) {\n      console.log(err);\n      dispatch({ type: 'areFetching', value: false });\n    }\n  }, [dispatch]);\n\n  // Fetch data once at startup when the component first mounts.\n  // Since fetchProperties is memoized from useCallback, listing it as a\n  // dependency will not cause infinite rerenders\n  useEffect(() => {\n    fetchProperties();\n  }, [fetchProperties]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header message=\"Good Afternoon, Will\"></Header>\n      </header>\n      <body>\n        <JournalGrid />\n      </body>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}